{
  "content": [
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "Human society has a long tradition of designing and applying systems and technologies to limit the effects of our own inherent weaknesses. An early example is double-entry accounting; a system who's basic function is to catch common errors, and is "
            },
            {
              "emphasis": "none",
              "segment": "more than 700 years old.",
              "link": "https://en.wikipedia.org/wiki/History_of_accounting"
            },
            {
              "emphasis": "none",
              "segment": " Yet it is rare to find accountants who believe double-entry accounting should be abandoned, and replaced with something more error-prone but \"convenient\". Perhaps they recognize that the often tedious demands of double-entry accounting is exactly what makes it so reliable. Like most things in life, planning and care in the present pays off handsomely with stability and predictability in the future."
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "A common criticism of Ada includes a perceived excess verbosity. In fact, that was a deliberate design decision. Often in our rush to insert more and more programmer convinces into our favourite languages, we tend to miss the raw human weaknesses that turn those shortcuts into unrelenting hazards."
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "Ada is perhaps the only mature, general-purpose language that began its life with a "
            },
            {
              "emphasis": "none",
              "segment": "rigorously refined set of requirements",
              "link": "http://www.adahome.com/History/Steelman/steeltab.htm"
            },
            {
              "emphasis": "none",
              "segment": " that went through four revisions over three years, before any language design began. Those basic requirements live-on as the very first section of the "
            },
            {
              "emphasis": "none",
              "segment": "Ada specification",
              "link": "http://www.adaic.org/ada-resources/standards/ada12/"
            },
            {
              "emphasis": "bold",
              "segment": ": \"Design Goals\". "
            },
            {
              "emphasis": "none",
              "segment": "Many popular language standards lack any such broad statement of intent, let alone a thorough requirements discovery process that preceded the language design."
            }
          ]
        }
      ]
    },
    {
      "type": "image",
      "src": "/blog_assets/1/ada_rm_design_goals.jpg",
      "alt": "Ada 2012 Reference Manual - Pg xii, various highlights"
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "The \"Should Have Used Ada\" (SHUA) series selects examples from the "
            },
            {
              "emphasis": "none",
              "segment": "daily stream",
              "link": "https://twitter.com/cvenew"
            },
            {
              "emphasis": "none",
              "segment": " of vulnerabilities in common software, which are often due to the convolution of human error and programmer-biased language design. The theme is to demonstrate with salient examples how Ada can innately protect applications from common errors."
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "Our first vulnerability looks at the (in)famous \"Goto fail\" iOS SSL/TLS vulnerability from 2014. "
            },
            {
              "emphasis": "none",
              "segment": "Here",
              "link": "https://www.imperialviolet.org/2014/02/22/applebug.html"
            },
            {
              "emphasis": "none",
              "segment": " is an excellent blog-post discussing the vulnerability in detail."
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "We'll do a really quick and simple run-down of the key points. Following is an abbreviated selection of the original code before it was patched (full listing "
            },
            {
              "emphasis": "none",
              "segment": "here",
              "link": "http://opensource.apple.com/source/Security/Security-55471/libsecurity_ssl/lib/sslKeyExchange.c"
            },
            {
              "emphasis": "none",
              "segment": ")."
            }
          ]
        }
      ]
    },
    {
      "type": "code",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "static OSStatus"
            }
          ]
        },
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "SSLVerifySignedServerKeyExchange(SSLContext *ctx, bool isRsa, SSLBuffer signedParams,"
            }
          ]
        },
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "                                 uint8_t *signature, UInt16 signatureLen)"
            }
          ]
        },
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "{"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "OSStatus        err;"
            }
          ]
        }
      ]
    },
    {
      "type": "code",
      "block": [
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "if ((err = ReadyHash(&SSLHashSHA1, &hashCtx)) != 0)"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "none",
              "segment": "goto fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "if ((err = SSLHashSHA1.update(&hashCtx, &clientRandom)) != 0)"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "none",
              "segment": "goto fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "if ((err = SSLHashSHA1.update(&hashCtx, &serverRandom)) != 0)"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "none",
              "segment": "goto fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "if ((err = SSLHashSHA1.update(&hashCtx, &signedParams)) != 0)"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "none",
              "segment": "goto fail;"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "none",
              "segment": "goto fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "if ((err = SSLHashSHA1.final(&hashCtx, &hashOut)) != 0)"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "none",
              "segment": "goto fail;"
            }
          ]
        }
      ]
    },
    {
      "type": "code",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "fail:"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "SSLFreeBuffer(&signedHashes);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "SSLFreeBuffer(&hashCtx);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "return err;"
            }
          ]
        },
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "}"
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "The above function's role is to verify a key exchange, returning a status code (\"OSStatus\") declaring the result of the verification. We see that \"err\" is used as a running result from a string of hash operations. The idea being that if one of the operations should fail, then that specific failure code is dutifully returned. Unfortunately this means that as long as \"serverRandom\" and \"signedParams\" are successfully hashed, no actual comparison or verification is made thereafter, since the third goto statement is unconditionally executed, which then reports that the verification is \"OK\", even if it really isn't."
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "Now looking at this error, it is probably safe to assume that the programmer did not intentionally insert \"goto fail\" twice. "
            },
            {
              "emphasis": "none",
              "segment": "Some",
              "link": "https://news.ycombinator.com/item?id=7319028"
            },
            {
              "emphasis": "none",
              "segment": " speculate it came from tripping-over-keys in Vim, though most agree it was a poorly executed merge or copy-paste operation. Indeed, there are not many other conclusions to be made if deliberate actions are ruled-out."
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "Let's start-off by imagining what the pre-bug condition would look like in Ada. The goal here is to put ourselves in the shoes of the original programmer, and try to represent their style, as if they were Ada programmers "
            },
            {
              "emphasis": "italic",
              "segment": "at the time"
            },
            {
              "emphasis": "none",
              "segment": " (not necessarily good Ada programmers)."
            }
          ]
        }
      ]
    },
    {
      "type": "code",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "bold",
              "segment": "function "
            },
            {
              "emphasis": "none",
              "segment": "SSL_Versify_Signed_Server_Key_Exchange"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "(Context      : "
            },
            {
              "emphasis": "bold",
              "segment": "in out "
            },
            {
              "emphasis": "none",
              "segment": "SSL_Context;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " Is_RSA       : "
            },
            {
              "emphasis": "bold",
              "segment": "in     "
            },
            {
              "emphasis": "none",
              "segment": "Boolean;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " Signed_Params: "
            },
            {
              "emphasis": "bold",
              "segment": "in     "
            },
            {
              "emphasis": "none",
              "segment": "SSL_Buffer_Access;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " Signature    : "
            },
            {
              "emphasis": "bold",
              "segment": "in     "
            },
            {
              "emphasis": "none",
              "segment": "SSL_Signature)"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "-- Note we can get \"signatureLen\" from Signature'Length"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "return "
            },
            {
              "emphasis": "none",
              "segment": "OS_Status"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        },
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "bold",
              "segment": "is"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "Ret_Error: OS_Status;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "Hash_Ctx : SSL_Buffer_Access := "
            },
            {
              "emphasis": "bold",
              "segment": "null;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "Hash_Out : SSL_Buffer_Access := "
            },
            {
              "emphasis": "bold",
              "segment": "null;"
            }
          ]
        }
      ]
    },
    {
      "type": "code",
      "block": [
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "Ret_Error := Ready_Hash (SSL_Hash_SHA1, Hash_Ctx);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "if "
            },
            {
              "emphasis": "none",
              "segment": "Ret_Error /= OK "
            },
            {
              "emphasis": "bold",
              "segment": "then"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "bold",
              "segment": "goto "
            },
            {
              "emphasis": "none",
              "segment": "Fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "end if;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "Ret_Error := SSL_Hash_SHA1.Update (Hash_Ctx, Server_Random);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "if "
            },
            {
              "emphasis": "none",
              "segment": "Ret_Error /= OK "
            },
            {
              "emphasis": "bold",
              "segment": "then"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "bold",
              "segment": "goto "
            },
            {
              "emphasis": "none",
              "segment": "Fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "end if;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "Ret_Error := SSL_Hash_SHA1.Update (Hash_Ctx, Client_Random);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "if "
            },
            {
              "emphasis": "none",
              "segment": "Ret_Error /= OK "
            },
            {
              "emphasis": "bold",
              "segment": "then"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "bold",
              "segment": "goto "
            },
            {
              "emphasis": "none",
              "segment": "Fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "end if;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "Ret_Error := SSL_Hash_SHA1.Update (Hash_Ctx, Signed_Params);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "if "
            },
            {
              "emphasis": "none",
              "segment": "Ret_Error /= OK "
            },
            {
              "emphasis": "bold",
              "segment": "then"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "bold",
              "segment": "goto "
            },
            {
              "emphasis": "none",
              "segment": "Fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "end if;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "Ret_Error := SSL_Hash_SHA1.Final (Hash_Ctx, Hash_Out);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "if "
            },
            {
              "emphasis": "none",
              "segment": "Ret_Error /= OK "
            },
            {
              "emphasis": "bold",
              "segment": "then"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "bold",
              "segment": "goto "
            },
            {
              "emphasis": "none",
              "segment": "Fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "end if;"
            }
          ]
        }
      ]
    },
    {
      "type": "code",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "<<Fail>>"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "SSL_Free_Buffer (Hashes);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "SSL_Free_Buffer (Signed_Hashes);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "SSL_Free_Buffer (Hash_Ctx);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "return "
            },
            {
              "emphasis": "none",
              "segment": "Ret_Error;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        },
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "bold",
              "segment": "end "
            },
            {
              "emphasis": "none",
              "segment": "SSL_Versify_Signed_Server_Key_Exchange;"
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "One popular shortcut missing from Ada is the ability to test the result of a function simultaneously with the assignment of that function's result to a variable. We see this here, with distinct (and yes, verbose) try and test blocks for each hash operation. Like nearly everything in Ada, this is deliberate. Separating assignment from evaluation like this aids readability, and prevents unintentional side-effects."
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "We are not trying to make this post about improving the flawed code, or improving coding practices in general. Rather the point is to demonstrate Ada's innate ability to protect against poor practices. It is easy to say that something should be done in some way (in theory). It is a whole other thing to ensure that people will really do it (in practice). Ada was deliberately designed with the awareness that human programmers can be expected to make mistakes, and lots of them. Therefore we are not talking about how Ada enables better software engineering practices, though it certainly does. Rather, we want to demonstrate how the exact same poor practices that led to a serious vulnerability, if implemented through Ada, would have been outright precluded, or otherwise identified early-on."
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "Let's now simulate the most likely scenarios discussed above which could have lead to the Goto fail vulnerability appearing. We'll start with a common copy-paste replace operation."
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "Imagine we copy this highlighted region:"
            }
          ]
        }
      ]
    },
    {
      "type": "code",
      "block": [
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "highlight",
              "segment": "if ((err = SSLHashSHA1.update(&hashCtx, &serverRandom)) != 0)"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "highlight",
              "segment": "goto fail;"
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "And then paste it over a target region:"
            }
          ]
        }
      ]
    },
    {
      "type": "code",
      "block": [
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "highlight",
              "segment": "if ((err = SomeOtherFunction) != 0)"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "none",
              "segment": "goto fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "if ((err = SSLHashSHA1.final(&hashCtx, &hashOut)) != 0)"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "none",
              "segment": "goto fail;"
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "This is gives us the vulnerability immediately:"
            }
          ]
        }
      ]
    },
    {
      "type": "code",
      "block": [
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "if ((err = SSLHashSHA1.update(&hashCtx, &serverRandom)) != 0)"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "none",
              "segment": "goto fail;"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "none",
              "segment": "goto fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "if ((err = SSLHashSHA1.final(&hashCtx, &hashOut)) != 0)"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "none",
              "segment": "goto fail;"
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "Can we make the same error in Ada? Surely, but it could never work if the target was only a single line.  We'd just end-up repeating the test of Ret_Error twice (harmlessly). So let's try to be more realistic, let's say we forgot to select the last line of the target, which is a realistic error."
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "So we copy the full block:"
            }
          ]
        }
      ]
    },
    {
      "type": "code",
      "block": [
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "highlight",
              "segment": "Ret_Error := SSL_Hash_SHA1.Update (Hash_Ctx, Server_Random);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold_highlight",
              "segment": "if "
            },
            {
              "emphasis": "highlight",
              "segment": "Ret_Error /= OK "
            },
            {
              "emphasis": "bold_highlight",
              "segment": "then"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "bold_highlight",
              "segment": "goto "
            },
            {
              "emphasis": "highlight",
              "segment": "Fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold_highlight",
              "segment": "end if;"
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "Pasting over the highlighted block (minus one line - by accident):"
            }
          ]
        }
      ]
    },
    {
      "type": "code",
      "block": [
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "highlight",
              "segment": "Ret_Error := Some_Other_Function;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold_highlight",
              "segment": "if "
            },
            {
              "emphasis": "highlight",
              "segment": "Ret_Error /= OK "
            },
            {
              "emphasis": "bold_highlight",
              "segment": "then"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "bold_highlight",
              "segment": "goto "
            },
            {
              "emphasis": "highlight",
              "segment": "Fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "end if;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "Ret_Error := SSL_Hash_SHA1.Final (Hash_Ctx, Hash_Out);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "if "
            },
            {
              "emphasis": "none",
              "segment": "Ret_Error /= OK "
            },
            {
              "emphasis": "bold",
              "segment": "then"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "bold",
              "segment": "goto "
            },
            {
              "emphasis": "none",
              "segment": "Fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "end if;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "And we get... Something that is not valid Ada, and will be outright refused by the compiler:"
            }
          ]
        }
      ]
    },
    {
      "type": "code",
      "block": [
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "Ret_Error := SSL_Hash_SHA1.Update (Hash_Ctx, Server_Random);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "if "
            },
            {
              "emphasis": "none",
              "segment": "Ret_Error /= OK "
            },
            {
              "emphasis": "bold",
              "segment": "then"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "bold",
              "segment": "goto "
            },
            {
              "emphasis": "none",
              "segment": "Fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "end if;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "end if;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "Ret_Error := SSL_Hash_SHA1.Final (Hash_Ctx, Hash_Out);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "if "
            },
            {
              "emphasis": "none",
              "segment": "Ret_Error /= OK "
            },
            {
              "emphasis": "bold",
              "segment": "then"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "bold",
              "segment": "goto "
            },
            {
              "emphasis": "none",
              "segment": "Fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "end if;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "Of course, this scenario is caught in C too "
            },
            {
              "emphasis": "italic",
              "segment": "if brackets are enforced. "
            },
            {
              "emphasis": "none",
              "segment": "In Ada, \"end if\" isn't optional. All blocks of every kind must have an \"end\". This is an important distinction. If this scenario is really what introduced the vulnerability, Ada would have caught it by it's very nature."
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "How about single line deletion? Imagine we had some other property that we no longer wanted to include in the hash. We know that would lead to the vulnerability in C. But in Ada, it is totally benign. Like with a single line replace as above, this would just result in a duplicate test of Ret_Error."
            }
          ]
        }
      ]
    },
    {
      "type": "code",
      "block": [
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "Ret_Error := SSL_Hash_SHA1.Update (Hash_Ctx, Client_Random);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "if "
            },
            {
              "emphasis": "none",
              "segment": "Ret_Error /= OK "
            },
            {
              "emphasis": "bold",
              "segment": "then"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "bold",
              "segment": "goto "
            },
            {
              "emphasis": "none",
              "segment": "Fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "end if;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "if "
            },
            {
              "emphasis": "none",
              "segment": "Ret_Error /= OK "
            },
            {
              "emphasis": "bold",
              "segment": "then"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "bold",
              "segment": "goto "
            },
            {
              "emphasis": "none",
              "segment": "Fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "end if;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "Ret_Error := SSL_Hash_SHA1.Final (Hash_Ctx, Hash_Out);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "if "
            },
            {
              "emphasis": "none",
              "segment": "Ret_Error /= OK "
            },
            {
              "emphasis": "bold",
              "segment": "then"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "bold",
              "segment": "goto "
            },
            {
              "emphasis": "none",
              "segment": "Fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "end if;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "In fact, overall we find that there would never be a time that Goto fail would appear outside of some kind of block, usually an if statement. Unless deliberate, it would be extremely unlikely to find the goto outside of a conditional block  by sheer accident."
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "Even in the very worst case, where the result was programmatically identical to the original ,the "
            },
            {
              "emphasis": "bold",
              "segment": "default"
            },
            {
              "emphasis": "none",
              "segment": " gcc compiler configuration warns us:"
            }
          ]
        }
      ]
    },
    {
      "type": "code",
      "block": [
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "Ret_Error := Ready_Hash (SSL_Hash_SHA1, Hash_Ctx);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "if "
            },
            {
              "emphasis": "none",
              "segment": "Ret_Error /= OK "
            },
            {
              "emphasis": "bold",
              "segment": "then"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "bold",
              "segment": "goto "
            },
            {
              "emphasis": "none",
              "segment": "Fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "end if;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "Ret_Error := SSL_Hash_SHA1.Update (Hash_Ctx, Server_Random);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "if "
            },
            {
              "emphasis": "none",
              "segment": "Ret_Error /= OK "
            },
            {
              "emphasis": "bold",
              "segment": "then"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "bold",
              "segment": "goto "
            },
            {
              "emphasis": "none",
              "segment": "Fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "end if;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "Ret_Error := SSL_Hash_SHA1.Update (Hash_Ctx, Client_Random);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "if "
            },
            {
              "emphasis": "none",
              "segment": "Ret_Error /= OK "
            },
            {
              "emphasis": "bold",
              "segment": "then"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "bold",
              "segment": "goto "
            },
            {
              "emphasis": "none",
              "segment": "Fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "end if;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "Ret_Error := SSL_Hash_SHA1.Update (Hash_Ctx, Signed_Params);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "if "
            },
            {
              "emphasis": "none",
              "segment": "Ret_Error /= OK "
            },
            {
              "emphasis": "bold",
              "segment": "then"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "bold",
              "segment": "goto "
            },
            {
              "emphasis": "none",
              "segment": "Fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "end if;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "goto "
            },
            {
              "emphasis": "none",
              "segment": "Fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": "Ret_Error := SSL_Hash_SHA1.Final (Hash_Ctx, Hash_Out);"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "if "
            },
            {
              "emphasis": "none",
              "segment": "Ret_Error /= OK "
            },
            {
              "emphasis": "bold",
              "segment": "then"
            }
          ]
        },
        {
          "indent": 2,
          "line": [
            {
              "emphasis": "bold",
              "segment": "goto "
            },
            {
              "emphasis": "none",
              "segment": "Fail;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "bold",
              "segment": "end if;"
            }
          ]
        },
        {
          "indent": 1,
          "line": [
            {
              "emphasis": "none",
              "segment": " "
            }
          ]
        }
      ]
    },
    {
      "type": "code",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "$ gcc -c fail.adb"
            }
          ]
        },
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "fail.adb:22:04: warning: unreachable code"
            }
          ]
        }
      ]
    },
    {
      "type": "text",
      "block": [
        {
          "indent": 0,
          "line": [
            {
              "emphasis": "none",
              "segment": "Testing and quality standards are always basic requirements for any engineering project. However, total coverage is often impossible or impractically expensive. This is especially true for commercial software, which is not regulated in any meaningful way, unlike safety-critical software.  Rather than trying to eliminate these kinds of basic errors through endlessly stricter standards and expanded testing on a more error-prone language, Ada can be leveraged to create a more focused, efficient, and reliable testing environment. In essence, using Ada introduces built-in static and dynamic analysis by design, which can eliminate or identify most common vulnerabilities, allowing testing to focus on errors in the higher-level program behavior."
            }
          ]
        }
      ]
    }
  ]
}